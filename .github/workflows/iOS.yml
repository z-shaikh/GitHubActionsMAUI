name: CICD Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
env:
    DOTNETVERSION: 8.0.x

jobs:  
  buildiOS:
    runs-on: macos-14
    
    steps:
      - uses: actions/checkout@v2

      # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      # github docs for installing cert and provisioning profile
        
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
      - name: Setup .NET SDK ${{env.DOTNETVERSION}}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version:  '${{env.DOTNETVERSION}}'

      - name: Install .NET MAUI
        shell: bash
        run: |
          dotnet nuget locals all --clear 
          dotnet workload install maui --source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet7/nuget/v3/index.json --source https://api.nuget.org/v3/index.json
          dotnet workload install android ios --source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet7/nuget/v3/index.json --source https://api.nuget.org/v3/index.json
      - name: Check X-Code version
        run: /usr/bin/xcodebuild -version
      
      - name: Select X-Code 
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.1'
          
      - name: Restore nuget packages
        run: |
          dotnet restore GitHubActionsMAUI.sln
          
      # - name: Build Android App
      #   shell: bash
      #   run: |
      #       dotnet publish GitHubActionsMAUI/GitHubActionsMAUI.csproj -f:net8.0-android -c:Release
      
      # - name: List files in the build directory
      #   run: ls -R GitHubActionsMAUI/bin/Release/

      # Store Android Signing Keystore and password in Secrets using base64 encoding
      # https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/certutil
      # commandline util to encode to base64 on windows
      # - name: Extract Android signing key from env
      #   shell: bash
      #   run: |
      #       echo "${{ secrets.RELEASE_KEYSTORE }}" > android/release.jks.base64
      #       base64 -d android/release.jks.base64 > android/release.decrypted.jks

      #   # # check android SDK paths etc in installed VM : https://github.com/actions/virtual-environments#available-environments
      # - name: Sign dev build
      #   shell: bash
      #   run: 
      #     jarsigner -keystore android/release.decrypted.jks -storepass "${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" -signedjar ./android/app/build/outputs/bundle/release/app-release-signed.aab ./android/app/build/outputs/bundle/release/app-release.aab release

      # - uses: actions/upload-artifact@v2
      #   with:
      #       name: artifacts-android
      #       path: |
      #         GitHubActionsMAUI/bin/Release/net8.0-android/publish/GitHubActionsMAUI.apk
        
      # https://docs.microsoft.com/en-us/dotnet/maui/ios/deployment/overview
      - name : Build iOS App
        shell: bash
        run: |
          dotnet publish GitHubActionsMAUI/GitHubActionsMAUI.csproj -c Release -f:net8.0-ios /p:ArchiveOnBuild=true /p:EnableAssemblyILStripping=false
      
      - name: List files in the build directory
        run: ls -R GitHubActionsMAUI/bin/Release/

      # - name: Build and Run UnitTests
      #   shell: bash
      #   run: |
      #     dotnet build <path to unit test csproj>
      #     dotnet test <path to unit test csproj> --no-build --verbosity normal
      
      - name: Uploading artifact zip file
        uses: actions/upload-artifact@v2
        with:
          name: artifacts-ios-zip
          path: |
            GitHubActionsMAUI/bin/Release/net8.0-ios/ios-arm64/publish/GitHubActionsMAUI.ipa

                       
      # You may pin to the exact commit or the version.
      # uses: Apple-Actions/upload-testflight-build@54dc215b4cd5529730db39f11c84efdb71414e07
      - name: Upload app to TestFlight
        uses: Apple-Actions/upload-testflight-build@v1
        with:
          # The path to the app (ipa etc)
            app-path: |
              GitHubActionsMAUI/bin/Release/net8.0-ios/ios-arm64/publish/GitHubActionsMAUI.ipa
              
          # The AppStoreConnect API Key Issuer Identifier
            issuer-id: secrets.ISSUER_ID
          # The Key ID for AppStore Connect API
            api-key-id: secrets.KEY_ID_STORE_CONNECT
          # The PKCS8 format Private Key for AppStore Connect API
            api-private-key: secrets.API_PRIVATE_KEY_STORE_CONNECT

          
